// Convierte este schema de Prisma a formato database.build, incluyendo:
// - Todas las tablas con sus columnas y tipos de datos
// - Claves primarias (pk)
// - Claves foráneas (fk) con sus relaciones
// - Campos únicos (unique)
// - Valores por defecto cuando sean relevantes
// - Los enums como tablas de referencia

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Usuario {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String
  rol      Rol    @default(DOCENTE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bitacora         Bitacora[]
  datosPersonales  DatosPersonales?
  cedulaAutorizada CedulaAutorizada[]
  docente          Docente?
}

model DatosPersonales {
  id          Int  @id @default(autoincrement())
  usuarioId   Int  @unique
  direccionId Int?

  primerNombre    String
  segundoNombre   String?
  tercerNombre    String?
  primerApellido  String
  segundoApellido String?
  sexo            Sex
  fechaNacimiento DateTime
  telefono        String?
  numeroCedula    Int
  numeroBancario  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  usuario    Usuario     @relation(fields: [usuarioId], references: [id])
  direccion  Direccion?  @relation(fields: [direccionId], references: [id])
  expediente Expediente?
}

model Expediente {
  id                Int @id @default(autoincrement())
  datosPersonalesId Int @unique

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  datosPersonales DatosPersonales @relation(fields: [datosPersonalesId], references: [id])
  documento       Documento[]
  estudio         Estudio[]
}

model Docente {
  id        Int @id @default(autoincrement())
  usuarioId Int @unique

  usuario Usuario? @relation(fields: [usuarioId], references: [id])
}

model TipoDocumento {
  id       Int      @id @default(autoincrement())
  nombre   String
  vigencia Vigencia @default(ACTIVO)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  documento Documento[]
}

model Documento {
  id              Int              @id @default(autoincrement())
  tipoDocumentoId Int
  expedienteId    Int
  url             String
  estatus         EstatusDocumento @default(PENDIENTE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tipoDocumento TipoDocumento @relation(fields: [tipoDocumentoId], references: [id])
  expediente    Expediente    @relation(fields: [expedienteId], references: [id])
}

model NivelEstudio {
  id             Int            @id @default(autoincrement())
  nivelAcademico NivelAcademico
  tipo           TipoEstudio

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  estudio Estudio[]
}

model CasaEstudio {
  id     Int    @id @default(autoincrement())
  nombre String

  Estudio Estudio[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Estudio {
  id             Int              @id @default(autoincrement())
  expedienteId   Int
  nivelEstudioId Int
  casaEstudioId  Int
  titulo         String
  fecha          DateTime
  imgDocumento   String
  notas          NotaEstudio[]
  estatus        EstatusDocumento @default(PENDIENTE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  expediente   Expediente   @relation(fields: [expedienteId], references: [id])
  nivelEstudio NivelEstudio @relation(fields: [nivelEstudioId], references: [id])
  casaEstudio  CasaEstudio  @relation(fields: [casaEstudioId], references: [id])
}

model NotaEstudio {
  id           Int    @id @default(autoincrement())
  estudioId    Int
  url          String
  numeroPagina Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  estudio Estudio @relation(fields: [estudioId], references: [id], onDelete: Cascade)
}

model ZonaUrbanizacion {
  id           Int      @id @default(autoincrement())
  estadoPaisId Int
  codigoPostal Int
  zona         String
  vigencia     Vigencia @default(ACTIVO)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  estadoPais EstadoPais  @relation(fields: [estadoPaisId], references: [id])
  direccion  Direccion[]
  Campus     Campus[]
}

model Direccion {
  id                 Int    @id @default(autoincrement())
  zonaUrbanizacionId Int
  calle              String
  numeroCasa         Int

  datosPersonales  DatosPersonales[]
  zonaUrbanizacion ZonaUrbanizacion  @relation(fields: [zonaUrbanizacionId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EstadoPais {
  id       Int      @id @default(autoincrement())
  estado   String   @unique
  vigencia Vigencia @default(ACTIVO)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  zonaUrbanizacion ZonaUrbanizacion[]
}

model Campus {
  id                 Int        @id @default(autoincrement())
  zonaUrbanizacionId Int
  tipo               TipoCampus
  fechaCreacion      DateTime
  fechaCierre        DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  area             Area[]
  zonaUrbanizacion ZonaUrbanizacion @relation(fields: [zonaUrbanizacionId], references: [id])
}

model Area {
  id       Int    @id @default(autoincrement())
  nombre   String
  campusId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  campus   Campus     @relation(fields: [campusId], references: [id])
  programa Programa[]
}

model Programa {
  id             Int            @id @default(autoincrement())
  areaId         Int
  nombre         String
  nivelAcademico NivelAcademico
  modalidad      Modalidad
  duracionAnios Int
  vigencia       Vigencia

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  area Area @relation(fields: [areaId], references: [id])
}

model Bitacora {
  id        Int              @id @default(autoincrement())
  usuarioId Int
  accion    String
  type      AccionesBitacora
  ip        String
  mensaje   String?

  usuario Usuario @relation(fields: [usuarioId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CedulaAutorizada {
  id        Int      @id @default(autoincrement())
  usuarioId Int
  cedula    Int      @unique
  vigencia  Vigencia @default(ACTIVO)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  usuario Usuario @relation(fields: [usuarioId], references: [id])
}

enum AccionesBitacora {
  //Usuario
  LOGIN
  REGISTRO_USUARIO
  CHANGE_PASSWORD_EMAIL
  OBTENER_USUARIO
  ACTUALIZACION_USUARIO

  //estado
  REGISTRO_ESTADO
  ACTUALIZACION_ESTADO

  //zona
  REGISTRO_ZONA_URBANIZACION
  ACTUALIZACION_ZONA_URBANIZACION

  //estudio
  REGISTRO_ESTUDIO
  ACTUALIZACION_ESTUDIO

  //micelanea
  ERROR
}

enum Rol {
  SUPER
  ADMIN
  AREA
  DOCENTE
}

enum Sex {
  HOMBRE
  MUJER
}

enum Vigencia {
  ACTIVO
  INACTIVO
}

enum EstatusDocumento {
  PENDIENTE
  APROBADO
  RECHAZADO
}

enum NivelAcademico {
  TSU
  LICENCIADO
  INGENIERO
  ESPECIALIDAD
  MAESTRIA
  DOCTORADO
}

enum TipoEstudio {
  PREGRADO
  POSTGRADO
}

enum TipoCampus {
  SEDE
  NUCLEO
  AULAMOVIL
}

enum Modalidad {
  ANUAL
  SEMESTRAL
  TRIMESTRAL
}
