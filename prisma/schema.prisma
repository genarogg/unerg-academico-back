// Convierte este schema de Prisma a formato database.build, incluyendo:
// - Todas las tablas con sus columnas y tipos de datos
// - Claves primarias (pk)
// - Claves foráneas (fk) con sus relaciones
// - Campos únicos (unique)
// - Valores por defecto cuando sean relevantes
// - Los enums como tablas de referencia

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Usuario {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String
  rol      Rol    @default(DOCENTE)

  Bitacora         Bitacora[]
  DatosPersonales  DatosPersonales?
  CedulaAutorizada CedulaAutorizada[]
  Docente          Docente?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Docente {
  id         Int     @id @default(autoincrement())
  usuario_id Int?    @unique
  Usuario    Usuario? @relation(fields: [usuario_id], references: [id])
}

model Bitacora {
  id      Int              @id @default(autoincrement())
  accion  String
  type    AccionesBitacora
  ip      String
  mensaje String?

  usuarioId Int
  usuario   Usuario @relation(fields: [usuarioId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DatosPersonales {
  id              Int      @id @default(autoincrement())
  primerNombre    String
  segundoNombre   String?
  tercerNombre    String?
  primerApellido  String
  segundoApellido String?
  sexo            Sex
  fechaNacimiento DateTime
  numeroCedula    Int
  numeroBancario  String?
  telefono        String?

  usuarioId   Int          @unique
  usuario     Usuario      @relation(fields: [usuarioId], references: [id])
  direccionId Int?
  direccion   Direccion?   @relation(fields: [direccionId], references: [id])
  Expediente  Expediente[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Direccion {
  id         Int    @id @default(autoincrement())
  calle      String
  numeroCasa Int

  DatosPersonales    DatosPersonales[]
  zonaUrbanizacionId Int
  zonaUrbanizacion   ZonaUrbanizacion  @relation(fields: [zonaUrbanizacionId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ZonaUrbanizacion {
  id           Int      @id @default(autoincrement())
  codigoPostal Int
  zona         String
  vigencia     Vigencia @default(ACTIVO)

  estadoPaisId Int
  estadoPais   EstadoPais  @relation(fields: [estadoPaisId], references: [id])
  Direccion    Direccion[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EstadoPais {
  id       Int      @id @default(autoincrement())
  estado   String   @unique
  vigencia Vigencia @default(ACTIVO)

  ZonaUrbanizacion ZonaUrbanizacion[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Expediente {
  id Int @id @default(autoincrement())

  datosPersonalesId Int
  datosPersonales   DatosPersonales @relation(fields: [datosPersonalesId], references: [id])

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Documento Documento[]

  Estudio Estudio[]
}

model CedulaAutorizada {
  id       Int      @id @default(autoincrement())
  cedula   Int      @unique
  vigencia Vigencia @default(ACTIVO)

  usuarioId Int
  usuario   Usuario @relation(fields: [usuarioId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TipoDocumento {
  id       Int      @id @default(autoincrement())
  nombre   String
  vigencia Vigencia @default(ACTIVO)

  Documento Documento[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Documento {
  id              Int              @id @default(autoincrement())
  tipoDocumentoId Int
  expedienteId    Int
  url             String
  estatus         EstatusDocumento @default(PENDIENTE)

  tipoDocumento TipoDocumento @relation(fields: [tipoDocumentoId], references: [id])
  expediente    Expediente    @relation(fields: [expedienteId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model NivelEstudio {
  id             Int            @id @default(autoincrement())
  nivelAcademico NivelAcademico
  tipo           TipoStudio

  Estudio Estudio[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CasaEstudio {
  id     Int    @id @default(autoincrement())
  nombre String

  Estudio Estudio[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Estudio {
  id             Int              @id @default(autoincrement())
  expedienteId   Int
  nivelEstudioId Int
  casaEstudioId  Int
  titulo         String
  fecha          DateTime
  imgDocumento   String
  notas          String
  estatus        EstatusDocumento @default(PENDIENTE)

  expediente   Expediente   @relation(fields: [expedienteId], references: [id])
  nivelEstudio NivelEstudio @relation(fields: [nivelEstudioId], references: [id])
  casaEstudio  CasaEstudio  @relation(fields: [casaEstudioId], references: [id])
}

enum AccionesBitacora {
  //Usuario
  LOGIN
  REGISTRO_USUARIO
  CHANGE_PASSWORD_EMAIL
  OBTENER_USUARIO
  ACTUALIZACION_USUARIO

  //estado
  REGISTRO_ESTADO
  ACTUALIZACION_ESTADO

  //zona
  REGISTRO_ZONA
  ACTUALIZACION_ZONA

  //estudio
  REGISTRO_ESTUDIO
  ACTUALIZACION_ESTUDIO

  //micelanea
  ERROR
}

enum Rol {
  SUPER
  ADMIN
  AREA
  DOCENTE
}

enum Sex {
  HOMBRE
  MUJER
}

enum Vigencia {
  ACTIVO
  INACTIVO
}

enum EstatusDocumento {
  PENDIENTE
  APROBADO
  RECHAZADO
}

enum NivelAcademico {
  TSU
  LICENCIADO
  INGENIERO
  ESPECIALIDAD
  MAESTRIA
  DOCTORA
}

enum TipoStudio {
  PREGRADO
  POSTGRADO
}
